(function(){"use strict";const k=(S,...I)=>postMessage({type:S,payload:I}),M=function(S){const I=function(...e){throw new Error(e.join(" "))};S.window===S?I("This code cannot run from the main thread.","Load it as a Worker from a separate Worker."):navigator.storage.getDirectory||I("This API requires navigator.storage.getDirectory.");const t=Object.create(null);t.verbose=1;const K={0:console.error.bind(console),1:console.warn.bind(console),2:console.log.bind(console)},D=(e,...s)=>{t.verbose>e&&K[e]("OPFS asyncer:",...s)},T=(...e)=>D(2,...e),P=(...e)=>D(1,...e),A=(...e)=>D(0,...e),l=Object.create(null);l.reset=()=>{let e;const s=o=>o.count=o.time=o.wait=0;for(e in t.opIds)s(l[e]=Object.create(null));let n=l.s11n=Object.create(null);n=n.serialize=Object.create(null),n.count=n.time=0,n=l.s11n.deserialize=Object.create(null),n.count=n.time=0},l.dump=()=>{let e,s=0,n=0,o=0;for(e in t.opIds){const i=l[e];s+=i.count,n+=i.time,o+=i.wait,i.avgTime=i.count&&i.time?i.time/i.count:0}console.log(S.location.href,"metrics for",S.location.href,`:
`,l,`
Total of`,s,"op(s) for",n,"ms","approx",o,"ms spent waiting on OPFS APIs."),console.log("Serialization metrics:",l.s11n)};const E=Object.create(null),L=new Set,U=function(e,s){const n=new URL(e,"file://irrelevant").pathname;return s?n.split("/").filter(o=>!!o):n},F=async function(s,n=!1){const o=U(s,!0),i=o.pop();let a=t.rootDir;for(const r of o)r&&(a=await a.getDirectoryHandle(r,{create:!!n}));return[a,i]},N=async e=>{if(e.syncHandle){T("Closing sync handle for",e.filenameAbs);const s=e.syncHandle;return delete e.syncHandle,delete e.xLock,L.delete(e.fid),s.close()}},V=async e=>{try{await N(e)}catch(s){P("closeSyncHandleNoThrow() ignoring:",s,e)}},G=async()=>{if(L.size)for(const e of L){const s=E[e];await V(s),T("Auto-unlocked",e,s.filenameAbs)}},H=async e=>{if(e.releaseImplicitLocks&&L.has(e.fid))return V(e)};class g extends Error{constructor(s,...n){super([...n,": "+s.name+":",s.message].join(" "),{cause:s}),this.name="GetSyncHandleError"}}g.convertRc=(e,s)=>e instanceof g&&(e.cause.name==="NoModificationAllowedError"||e.cause.name==="DOMException"&&e.cause.message.indexOf("Access Handles cannot")===0)?t.sq3Codes.SQLITE_BUSY:s;const C=async(e,s)=>{if(!e.syncHandle){const n=performance.now();T("Acquiring sync handle for",e.filenameAbs);const o=6,i=t.asyncIdleWaitTime*2;let a=1,r=i;for(;;r=i*++a)try{e.syncHandle=await e.fileHandle.createSyncAccessHandle();break}catch(c){if(a===o)throw new g(c,"Error getting sync handle for",s+"().",o,"attempts failed.",e.filenameAbs);P("Error getting sync handle for",s+"(). Waiting",r,"ms and trying again.",e.filenameAbs,c),Atomics.wait(t.sabOPView,t.opIds.retry,0,r)}T("Got",s+"() sync handle for",e.filenameAbs,"in",performance.now()-n,"ms"),e.xLock||(L.add(e.fid),T("Acquired implicit lock for",s+"()",e.fid,e.filenameAbs))}return e.syncHandle},d=(e,s)=>{T(e+"() => notify(",s,")"),Atomics.store(t.sabOPView,t.opIds.rc,s),Atomics.notify(t.sabOPView,t.opIds.rc)},W=function(e,s){s.readOnly&&I(e+"(): File is read-only: "+s.filenameAbs)},R=Object.create(null);R.op=void 0,R.start=void 0;const p=e=>{R.start=performance.now(),R.op=e,++l[e].count},u=()=>l[R.op].time+=performance.now()-R.start,_=Object.create(null);_.op=void 0,_.start=void 0;const w=e=>{_.start=performance.now(),_.op=e},f=()=>l[_.op].wait+=performance.now()-_.start;let z=!1;const v={"opfs-async-metrics":async()=>{p("opfs-async-metrics"),l.dump(),d("opfs-async-metrics",0),u()},"opfs-async-shutdown":async()=>{z=!0,d("opfs-async-shutdown",0)},mkdir:async e=>{p("mkdir");let s=0;w("mkdir");try{await F(e+"/filepart",!0)}catch(n){t.s11n.storeException(2,n),s=t.sq3Codes.SQLITE_IOERR}finally{f()}d("mkdir",s),u()},xAccess:async e=>{p("xAccess");let s=0;w("xAccess");try{const[n,o]=await F(e);await n.getFileHandle(o)}catch(n){t.s11n.storeException(2,n),s=t.sq3Codes.SQLITE_IOERR}finally{f()}d("xAccess",s),u()},xClose:async function(e){const s="xClose";p(s),L.delete(e);const n=E[e];let o=0;if(w(s),n){if(delete E[e],await N(n),n.deleteOnClose)try{await n.dirHandle.removeEntry(n.filenamePart)}catch(i){P("Ignoring dirHandle.removeEntry() failure of",n,i)}}else t.s11n.serialize(),o=t.sq3Codes.SQLITE_NOTFOUND;f(),d(s,o),u()},xDelete:async function(...e){p("xDelete");const s=await v.xDeleteNoWait(...e);d("xDelete",s),u()},xDeleteNoWait:async function(e,s=0,n=!1){let o=0;w("xDelete");try{for(;e;){const[i,a]=await F(e,!1);if(!a||(await i.removeEntry(a,{recursive:n}),s!==4660))break;n=!1,e=U(e,!0),e.pop(),e=e.join("/")}}catch(i){t.s11n.storeException(2,i),o=t.sq3Codes.SQLITE_IOERR_DELETE}return f(),o},xFileSize:async function(e){p("xFileSize");const s=E[e];let n=0;w("xFileSize");try{const o=await(await C(s,"xFileSize")).getSize();t.s11n.serialize(Number(o))}catch(o){t.s11n.storeException(1,o),n=g.convertRc(o,t.sq3Codes.SQLITE_IOERR)}await H(s),f(),d("xFileSize",n),u()},xLock:async function(e,s){p("xLock");const n=E[e];let o=0;const i=n.xLock;if(n.xLock=s,!n.syncHandle){w("xLock");try{await C(n,"xLock"),L.delete(e)}catch(a){t.s11n.storeException(1,a),o=g.convertRc(a,t.sq3Codes.SQLITE_IOERR_LOCK),n.xLock=i}f()}d("xLock",o),u()},xOpen:async function(e,s,n,o){const i="xOpen";p(i);const a=t.sq3Codes.SQLITE_OPEN_CREATE&n;w("xOpen");try{let r,c;try{[r,c]=await F(s,!!a)}catch(y){t.s11n.storeException(1,y),d(i,t.sq3Codes.SQLITE_NOTFOUND),u(),f();return}const h=await r.getFileHandle(c,{create:a});f();const b=Object.assign(Object.create(null),{fid:e,filenameAbs:s,filenamePart:c,dirHandle:r,fileHandle:h,sabView:t.sabFileBufView,readOnly:a?!1:t.sq3Codes.SQLITE_OPEN_READONLY&n,deleteOnClose:!!(t.sq3Codes.SQLITE_OPEN_DELETEONCLOSE&n)});b.releaseImplicitLocks=o&t.opfsFlags.OPFS_UNLOCK_ASAP||t.opfsFlags.defaultUnlockAsap,E[e]=b,d(i,0)}catch(r){f(),A(i,r),t.s11n.storeException(1,r),d(i,t.sq3Codes.SQLITE_IOERR)}u()},xRead:async function(e,s,n){p("xRead");let o=0,i;const a=E[e];try{w("xRead"),i=(await C(a,"xRead")).read(a.sabView.subarray(0,s),{at:Number(n)}),f(),i<s&&(a.sabView.fill(0,i,s),o=t.sq3Codes.SQLITE_IOERR_SHORT_READ)}catch(r){i===void 0&&f(),A("xRead() failed",r,a),t.s11n.storeException(1,r),o=g.convertRc(r,t.sq3Codes.SQLITE_IOERR_READ)}await H(a),d("xRead",o),u()},xSync:async function(e,s){p("xSync");const n=E[e];let o=0;if(!n.readOnly&&n.syncHandle){try{w("xSync"),await n.syncHandle.flush()}catch(i){t.s11n.storeException(2,i),o=t.sq3Codes.SQLITE_IOERR_FSYNC}f()}d("xSync",o),u()},xTruncate:async function(e,s){p("xTruncate");let n=0;const o=E[e];w("xTruncate");try{W("xTruncate",o),await(await C(o,"xTruncate")).truncate(s)}catch(i){A("xTruncate():",i,o),t.s11n.storeException(2,i),n=g.convertRc(i,t.sq3Codes.SQLITE_IOERR_TRUNCATE)}await H(o),f(),d("xTruncate",n),u()},xUnlock:async function(e,s){p("xUnlock");let n=0;const o=E[e];if(t.sq3Codes.SQLITE_LOCK_NONE===s&&o.syncHandle){w("xUnlock");try{await N(o)}catch(i){t.s11n.storeException(1,i),n=t.sq3Codes.SQLITE_IOERR_UNLOCK}f()}d("xUnlock",n),u()},xWrite:async function(e,s,n){p("xWrite");let o;const i=E[e];w("xWrite");try{W("xWrite",i),o=s===(await C(i,"xWrite")).write(i.sabView.subarray(0,s),{at:Number(n)})?0:t.sq3Codes.SQLITE_IOERR_WRITE}catch(a){A("xWrite():",a,i),t.s11n.storeException(1,a),o=g.convertRc(a,t.sq3Codes.SQLITE_IOERR_WRITE)}await H(i),f(),d("xWrite",o),u()}},Y=()=>{if(t.s11n)return t.s11n;const e=new TextDecoder,s=new TextEncoder("utf-8"),n=new Uint8Array(t.sabIO,t.sabS11nOffset,t.sabS11nSize),o=new DataView(t.sabIO,t.sabS11nOffset,t.sabS11nSize);t.s11n=Object.create(null);const i=Object.create(null);i.number={id:1,size:8,getter:"getFloat64",setter:"setFloat64"},i.bigint={id:2,size:8,getter:"getBigInt64",setter:"setBigInt64"},i.boolean={id:3,size:4,getter:"getInt32",setter:"setInt32"},i.string={id:4};const a=c=>i[typeof c]||I("Maintenance required: this value type cannot be serialized.",c),r=c=>{switch(c){case i.number.id:return i.number;case i.bigint.id:return i.bigint;case i.boolean.id:return i.boolean;case i.string.id:return i.string;default:I("Invalid type ID:",c)}};return t.s11n.deserialize=function(c=!1){++l.s11n.deserialize.count;const h=performance.now(),b=n[0],y=b?[]:null;if(b){const O=[];let m=1,x,q,Q;for(x=0;x<b;++x,++m)O.push(r(n[m]));for(x=0;x<b;++x){const j=O[x];j.getter?(Q=o[j.getter](m,t.littleEndian),m+=j.size):(q=o.getInt32(m,t.littleEndian),m+=4,Q=e.decode(n.slice(m,m+q)),m+=q),y.push(Q)}}return c&&(n[0]=0),l.s11n.deserialize.time+=performance.now()-h,y},t.s11n.serialize=function(...c){const h=performance.now();if(++l.s11n.serialize.count,c.length){const b=[];let y=0,O=1;for(n[0]=c.length&255;y<c.length;++y,++O)b.push(a(c[y])),n[O]=b[y].id;for(y=0;y<c.length;++y){const m=b[y];if(m.setter)o[m.setter](O,c[y],t.littleEndian),O+=m.size;else{const x=s.encode(c[y]);o.setInt32(O,x.byteLength,t.littleEndian),O+=4,n.set(x,O),O+=x.byteLength}}}else n[0]=0;l.s11n.serialize.time+=performance.now()-h},t.s11n.storeException=t.asyncS11nExceptions?(c,h)=>{c<=t.asyncS11nExceptions&&t.s11n.serialize([h.name,": ",h.message].join(""))}:()=>{},t.s11n},B=async function(){const s=Object.create(null);for(let n of Object.keys(t.opIds)){const o=v[n];if(!o)continue;const i=Object.create(null);s[t.opIds[n]]=i,i.key=n,i.f=o}for(;!z;)try{if(Atomics.wait(t.sabOPView,t.opIds.whichOp,0,t.asyncIdleWaitTime)==="timed-out"){await G();continue}const n=Atomics.load(t.sabOPView,t.opIds.whichOp);Atomics.store(t.sabOPView,t.opIds.whichOp,0);const o=s[n]??I("No waitLoop handler for whichOp #",n),i=t.s11n.deserialize(!0)||[];o.f?await o.f(...i):A("Missing callback for opId",n)}catch(n){A("in waitLoop():",n)}};navigator.storage.getDirectory().then(function(e){t.rootDir=e,S.onmessage=function({data:s}){switch(s.type){case"opfs-async-init":{const n=s.args;for(const o in n)t[o]=n[o];t.verbose=n.verbose??1,t.sabOPView=new Int32Array(t.sabOP),t.sabFileBufView=new Uint8Array(t.sabIO,0,t.fileBufferSize),t.sabS11nView=new Uint8Array(t.sabIO,t.sabS11nOffset,t.sabS11nSize),Object.keys(v).forEach(o=>{Number.isFinite(t.opIds[o])||I("Maintenance required: missing state.opIds[",o,"]")}),Y(),l.reset(),T("init state",t),k("opfs-async-inited"),B();break}case"opfs-async-restart":z&&(P("Restarting after opfs-async-shutdown. Might or might not work."),z=!1,B());break;case"opfs-async-metrics":l.dump();break}},k("opfs-async-loaded")}).catch(e=>A("error initializing OPFS asyncer:",e))};self.SharedArrayBuffer?self.Atomics?!self.FileSystemHandle||!self.FileSystemDirectoryHandle||!self.FileSystemFileHandle||!self.FileSystemFileHandle.prototype.createSyncAccessHandle||!navigator.storage.getDirectory?k("opfs-unavailable","Missing required OPFS APIs."):M(self):k("opfs-unavailable","Missing Atomics API.","The server must emit the COOP/COEP response headers to enable that."):k("opfs-unavailable","Missing SharedArrayBuffer API.","The server must emit the COOP/COEP response headers to enable that.")})();
